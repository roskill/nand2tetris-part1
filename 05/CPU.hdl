// This file is part of www.nanj2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an outalu,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the voutalue of this location. If the current instruction needs 
 * to write a voutalue to M, the voutalue is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any voutalue may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new voutalues only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //  1  1  1  a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
    // 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00

    And16(a=true, b=instruction, // map instruction bits
        out[15]=opcode,
        out[12]=abit,
        out[11]=c1,
        out[10]=c2,
        out[9]=c3,
        out[8]=c4,
        out[7]=c5,
        out[6]=c6,
        out[5]=d1,
        out[4]=d2,
        out[3]=d3,
        out[2]=j1,
        out[1]=j2,
        out[0]=j3);

    // determine opcode
    DMux(in=true, sel=opcode, a=ainstruction, b=cinstruction);

    // A register
    Mux16(a=outalu, b=instruction, sel=ainstruction, out=inA);
    Or(a=ainstruction, b=d1, out=aload);
    ARegister(in=inA, load=aload, out=a);

    // D register
    And(a=cinstruction, b=d2, out=dload);
    DRegister(in=outalu, load=dload, out=d);

    // select A register or M input based on a-bit
    Mux16(a=a, b=inM, sel=abit, out=aorm);
    
    // ALU
    And(a=true, b=c1, out=zx); // map control bits
    And(a=true, b=c2, out=nx);
    And(a=true, b=c3, out=zy);
    And(a=true, b=c4, out=ny);
    And(a=true, b=c5, out=f);
    And(a=true, b=c6, out=no);
    ALU(x=d, y=aorm, 
        zx=zx, nx=nx, zy=zy,ny=ny, f=f,no=no, 
        out=outalu, zr=zr, ng=ng);

    // parse jump bits
    Or(a=zr, b=ng, out=zrorng);
    Not(in=zrorng, out=pos);
    And(a=j1, b=ng, out=negative);
    And(a=j2, b=zr, out=zero);
    And(a=j3, b=pos, out=positive);

    // determine whether to jump
    Or(a=negative, b=zero, out=negzero);
    Or(a=negzero, b=positive, out=jumpcondition);
    And(a=jumpcondition, b=cinstruction, out=jump);
    PC(in=a, load=jump, inc=true, reset=reset, out[0..14]=pc);    


    // outputs
    // writeM
    And(a=cinstruction, b=d3, out=writeM);

    // addressM
    And16(a=true, b=a, out[0..14]=addressM);

    // outM
    And16(a=true, b=outalu, out=outM);    
}